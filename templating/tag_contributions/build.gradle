// Copyright 2019 VMware, Inc.
// SPDX-License-Indentifier: Apache-2.0

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

version = "$System.env.JSONTENG_CONTRIBS_BUILD_VERSION"

dependencies {
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
  implementation 'org.python:jython:2.7.1b3'
  implementation 'commons-cli:commons-cli:1.3.1'
  implementation 'commons-net:commons-net:3.5'
  implementation "com.vmware.jsonteng:jsonteng:${System.env.JSONTENG_BUILD_VERSION}"
}

compileJava   {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

artifacts {
  archives jar, javadocJar, sourceJar
}

signing {
  sign configurations.archives
}

group = "com.vmware.jsonteng"
archivesBaseName = "jsonteng-contribs"

publishing {
  publications {
    mavenJava(MavenPublication) {
      customizePom(pom)
      from components.java
      pom.withXml {
        def pomFile = file("${project.buildDir}/generated-pom.xml")
          writeTo(pomFile)
          def pomAscFile = signing.sign(pomFile).signatureFiles[0]
          artifact(pomAscFile) {
            classifier = null
            extension = 'pom.asc'
          }
      }

      artifact(sourceJar) {
        classifier = 'sources'
      }
      artifact(javadocJar) {
        classifier = 'javadoc'
      }

      project.tasks.signArchives.signatureFiles.each {
        def ext_matcher = it =~ /\.jar\.asc$/
        if (ext_matcher.find()) {
          artifact(it) {
            def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
            if (matcher.find()) {
              classifier = matcher.group(1)
            } else {
              classifier = null
            }
            extension = 'jar.asc'
          }
        }
      }
    }
  }
  repositories {
    maven {
      url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username ossrhUsername
        password ossrhPassword
      }
    }
  }
}

def customizePom(pom) {
  pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'Json Template Engine'
            description 'A template engine for processing parameterized Json objects.'
            url 'https://github.com/vmware/json-template-engine'

            licenses {
              license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              }
            }
            scm {
              connection 'scm:svn:https://github.com/vmware/json-template-engine.git'
              developerConnection 'scm:svn:https://github.com/vmware/json-template-engine.git'
              url 'https://github.com/vmware/json-template-engine.git'
            }
            developers {
              developer {
                id 'jyangbos'
                name 'Jim Yang'
                email 'jimyangdev@gmail.com'
              }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

task copyToLib( type: Copy ) {
  into "$buildDir/libs/lib"
  from configurations.runtimeClasspath
}

jar { dependsOn copyToLib }
